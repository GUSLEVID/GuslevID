<resources>
    <string name="app_name">Hello Kotlin!</string>
    <string name="title_activity_scrolling">Что такое Kotlin?</string>
    <string name="large_text">
        "Что такое Котлин?\n\n"

        "Котлин — это небольшой остров в Финском заливе недалеко от Санкт-Петербурга.Видимо, тем самым создатели дают отсылку к тому, что новый язык,как остров Котлин — младший русский брат далекого острова Ява. \n\n"

        "Для кого этот язык?\n\n"

        "Действительно, новый язык компилируется в JVM байт-код (есть еще и компиляция в JavaScript, но так как релиз компилятора именно в JVM, эту тему придется опять отложить).А это значит, что он может заинтересовать всех, кто имеет дело с Java-машиной и в целом с языками со сборщиком мусора (а с выходом релиза компиляции в JavaScript покрытие и возможности будут еще шире)\n\n"

        "Простой и совместимый!\n\n"

        "Две главных особенности котлина, на мой взгляд, это его простота и полная совместимость с Java.Котлин создавался компанией, которая делает очень много продуктов на Java и которая хорошо разбирается в современных инструментах разработки.Запрос на новый язык витает в воздухе давно, но сделать такой язык, который бы позволил взять (огромную) готовую кодовую базу Java,обычных Java-разработчиков, дать им новый инструмент и бесшовно (но более эффективно) продолжать разработку — такого инструмента до появления котлина не существовало.Создатели нового языка, на мой взгляд, очень хорошо почувствовали потребности бизнеса и разработчиков:бизнесу дали возможность увеличить эффективность разработчиков, а разработчикам дать современный инструмент для разработки. И когда я говорю о «современном инструменте», я, конечно, имею ввиду не только компилятор, но и поддержку в IDE, без которой лично моя деятельностьразработчика мне видится совсем немыслимой. В итоге: простота позволяет использовать язык почти любому Java-разработчику, который готов потратить полчаса на то, чтобы посмотреть туториал или спецификацию языка, обратная совместимость же позволяет использовать язык в уже существующем проекте. \n\n"


    </string>
    <string name="action_settings">Settings</string>
    <string name="title_activity_scrolling2">Зачем учить язык Kotlin?</string>
    <string name="large2_text">
    "Kotlin на текущий момент однозначно находится на пике популярности и может принести немало пользы в тестировании. Но не все так просто, в чем вы можете убедиться из этой статьи\n\n"

    "Откуда взялся этот ваш Kotlin? \n\n"

    "Kotlin — достаточно молодой язык, который разрабатывается и спонсируется компанией JetBrains. Из открытых источников можно узнать, что в разработку языка было вложено более $15 млн, а сам язык — это еще один способ популяризовать компанию и еще больше повысить продажи для Idea.
     Язык начал набирать популярность после того, как на конференции JavaOne 2015 Hans Dockter, CEO of Gradle, заявил, что Котлин получает официальную поддержку для написания Gradle билд-скриптов. Тогда он все еще был в бете, но новость всколыхнула всех неравнодушных. Волна хайпа начала подниматься уже в тот момент. На пике популярности язык оказался в мае этого года на конференции Google I/O, где было объявлено о том, что Котлин наряду с Java становится официальным языком разработки под платформу Android. Сразу же после этого весь Twitter был в постах о новом языке, появилась куча блог-постов с признаниями в любви ему. Представители JetBrains в различных источниках стали заявлять, что Kotlin — это будущее разработки на JVM.В целом если смотреть на ситуацию здраво, то причины хайпа вполне понятны. Джава развивается слишком медленно. Java 8 появилась аж в 2014 году, Java 9 на момент публикации уже вышла, но в самом языке слишком мало новых фишек. Более того, с Java 9 у многих все в момент перестало работать. И тут людям дают язык, наполненный фичами, часть из которых появится только в 10-ке.\n\n"

    " Что имеем в итоге\n\n"
    "Kotlin — очень приятный язык. Все, что уже реализовано у конкурентов Java, в нем есть. Конвертировать существующий код на Java в Kotlin немного проблематично. Нет еще пока полной совместимости со всеми самыми популярными Java-фреймворками и библиотеками. Выбирать Kotlin или хейтить его и идти учить JS — это Ваше решение. Но вы просто можете перейти по ссылочке на свежий репорт от Rebel Labs о состоянии Java-экосистемы, в котором Kotlin назван самым любимым языком c коэффициентом удовлетворенности 9.1 из 10.!\n\n"
</string>
    <string name="title_activity_scrolling3">Первая программа на Kotlin</string>
    <string name="large3_text">
        "Создадим первую программу на языке Kotlin. Что для этого необходимо?\n\n"
        "Для набора кода программы понадобится текстовый редактор. Это может быть любой тестовый редактор, например, встроенный блокнот или Notepad++. И для компиляции программы необходим компилятор.\n"
        "Кроме того, необходимо установить JDK (Java Development Kit). Загрузить пакеты JDK для установки можно с сайта компании Oracle - http://www.oracle.com/technetwork/java/javase/downloads/index.html. \n"
        "Загрузить компилятор непосредственно для самого языка Kotlin можно по адресу https://github.com/JetBrains/kotlin/releases/tag/v1.2.0.\n\n"
        "По выше указанному адресу можно найти архив. Загрузим и распакуем из архива папку kotlinc. В распакованном архиве в папке bin мы можем найти утилиту kotlinc, с помощью которой и будет производиться компиляция:\n"
        "Теперь определим на жестком диске каталог для файлов с исходным кодом. Например, в моем случае каталог будет находиться по пути c:/kotlin. В этом каталоге создадим текстовый файл и переименуем его в app.kt. Расширение kt - это арсширение файлов на языке Kotlin.
Далее определим в этом файле код, который будет выводить некоторое сообщение на консоль: \n"
    </string>
    <string name="title_activity_scrolling4">Классы и объкты</string>
    <string name="large4_text">
        " Kotlin поддерживает объектно-ориентированную парадигму программирования, а это значит, что программу на данном языке можно представить в виде взаимодействующих между собой объектов.
Представлением объекта является класс. Класс фактически представляет определение объекта. А объект является конкретным воплощением класса. Например, у всех есть некоторое представление о машине, например, кузов, четыре колеса, руль и т.д. - некоторый общий набор харакстеристик, присущих каждой машине. Это представление фактически и является классом. При этом есть разные машины, у которых отличается форма кузова, какие-то другие детали, то есть есть конкретные воплощения этого класса, конкретные объекты или экземпляры класса.
Для определения класса применяется ключевое слово class, после которого идет имя класса. А после имени класса в фигурных скобках определяется тело класса. Если класс не имеет тела, то фигурные скобки можно опустить. Например, определим класс, который представляет человека:\n"
        "В функции main определены три переменных типа Person. Стоит также отметить, что в отличие от других объектно-ориентированных языков (как C# или Java), функция main в Kotlin не помещается в отдельных класс, а всегда определяется вне какого-либо класса.
Для создания объекта класса необходимо вызвать конструктор данного класса. Конструктор фактически представляет функцию, которая называется по имени класса и которая выполняет инициализацию объекта. По умолчанию для класса компилятор генерирует пустой конструктор, который мы можем использовать:\n"
        "Часть кода после знака равно Person() как раз и представляет вызов конструктора, который создает объект класса Person. До вызова конструктора переменная класса не указывает ни на какой объект.
Например, создадим три объекта класса Person:

fun main(args: Array234String>) {

    val tom: Person = Person()
    val bob: Person = Person()
    val alice: Person = Person()
}

class Person\n"
        "В Kotlin классы могут содержать ряд компонентов:
конструкторы и инициализаторы
функции
свойства
вложенные классы
объявления объектов\n"
    </string>
    <string name="title_activity_scrolling5">Функции в классах</string>
    <string name="large5_text">
       " Класс также может содержать функции. Функции определяют поведение объектов данного класса. Такие функции еще называют member functions или функции-члены класса. Например, определим класс с функциями:\n"

"class Person(val name: String, val age: Int){

    fun sayHello(){
        println("Hello")
    }
    fun go(location: String){
        println("$name goes to $location")
    }
    fun getInfo() : String{
        return "Name: $name  Age: $age"
    }
}\n"
"Member function определяется также как и обычные функции. В частности, здесь в классе Person определена функция sayHello(), которая выводит на консоль строку "Hello" и эмулирует приветствие объекта Person. Вторая функция - go эмулирует движение объекта Person к определенному местоположению. Местоположение передается через параметр location. И третья функция getInfo возвращает информацию о текущем объекте в виде строки.
В функциях, которые определены внутри класса, доступны свойства этого класса. Так, в данном случае в функциях можно обратиться к свойствам name и age, которые определены в классе Person.
Для обращения к функциям класса необходимо использовать имя объекта, после которого идет название функции и в скобках значения для параметров этой функции:\n\n"

"fun main(args: Array11String>) {
    val bob: Person = Person("Bob", 23)
    bob.sayHello()
    bob.go("the shop")
    bob.go("the cinema")
    println(bob.getInfo())
}\n"
    </string>
    <string name="title_activity_main2">Main2Activity</string>
    <string name="title_home">Home</string>
    <string name="title_dashboard">Dashboard</string>
    <string name="title_notifications">Notifications</string>
</resources>
